import { Test, TestingModule } from '@nestjs/testing';
import { UnitOfWork } from '../services/unit-of-work.service';
import { IRepository } from '../interfaces/repository.interface';
import { TodosController } from './todos.controller';
import { TodosRepository } from './todos.repository';
import { CreateTodoDto } from './dtos/create-todo.dto';
import { TodoEntity } from './todo.entity';
import { NotFoundException, BadRequestException } from '@nestjs/common';

class TodosRepositoryMock implements IRepository<TodoEntity, CreateTodoDto> {
  private todos: TodoEntity[] = [];
  add(values: CreateTodoDto): Promise<TodoEntity> {
    const newTodo: TodoEntity = {
      ...values,
      id: '1',
      assignee: null,
    };
    this.todos.push(newTodo);
    return Promise.resolve(newTodo);
  }
  findAll(): Promise<TodoEntity[]> {
    return Promise.resolve(this.todos);
  }
  findById(id: string): Promise<TodoEntity | null> {
    const todo = this.todos.find(t => t.id === id) || null;
    return Promise.resolve(todo);
  }
  update(values: TodoEntity): Promise<TodoEntity | null> {
    const { id } = values;
    const todo = this.todos.find(t => t.id === id) || null;
    if (todo) {
      Object.assign(todo, values);
    }
    return Promise.resolve(todo);
  }
  remove(id: string): Promise<TodoEntity | null> {
    const index = this.todos.findIndex(t => t.id === id);
    if (index > -1) {
      const todo = this.todos[index];
      this.todos.splice(index, 1);
      return Promise.resolve(todo);
    }
    return Promise.resolve(null);
  }
}

describe('Todos Controller', () => {
  let controller: TodosController;

  beforeAll(async () => {
    const todosRepositoryMock = new TodosRepositoryMock();
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        {
          provide: TodosRepository,
          useValue: todosRepositoryMock,
        },
        {
          provide: UnitOfWork,
          useValue: {
            run(work: any) {
              return Promise.resolve(
                work({ todosRepository: todosRepositoryMock }),
              );
            },
          },
        },
      ],
      controllers: [TodosController],
    }).compile();

    controller = module.get<TodosController>(TodosController);
  });

  it('should be defined', () => {
    expect(controller).toBeDefined();
  });

  it('findAll should initially return an empty array', async () => {
    await expect(controller.findAll()).resolves.toEqual([]);
  });

  it('create should return the new todo with an autogenerated id', async () => {
    const values: CreateTodoDto = {
      name: 'name',
      description: 'description',
    };
    await expect(controller.create(values)).resolves.toHaveProperty('id', '1');
  });

  it('findAll should now return a 1-item array', async () => {
    await expect(controller.findAll()).resolves.toHaveLength(1);
  });

  it('findOne should throw NotFoundException if id does not exist', async () => {
    await expect(controller.findOne('2')).rejects.toBeInstanceOf(
      NotFoundException,
    );
  });

  it('findOne should find the todo based on id', async () => {
    await expect(controller.findOne('1')).resolves.toHaveProperty('id', '1');
  });

  it('assign should throw NotFoundException if id does not exist', async () => {
    await expect(controller.assign('2', 'assignee-a')).rejects.toBeInstanceOf(
      NotFoundException,
    );
  });

  it('assign should modify assignee property of todo', async () => {
    await controller.assign('1', 'assignee-a');
    await expect(controller.findOne('1')).resolves.toHaveProperty(
      'assignee',
      'assignee-a',
    );
  });

  it('assign should throw BadRequestException if the todo already has an assignee', async () => {
    await expect(controller.assign('1', 'assignee-b')).rejects.toBeInstanceOf(
      BadRequestException,
    );
  });

  it('remove should throw NotFoundException if id does not exist', async () => {
    await expect(controller.remove('2')).rejects.toBeInstanceOf(
      NotFoundException,
    );
  });

  it('remove should successfully delete the todo', async () => {
    await controller.remove('1');
    await expect(controller.findAll()).resolves.toEqual([]);
  });
});
